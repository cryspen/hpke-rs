searchState.loadedDescShard("hpke_rs", 0, "HPKE\nAuthenticated HPKE.\nAuthenticated HPKE with PSK.\nHPKE Base mode.\nThe HPKE context. Note that the RFC currently doesn’t …\nAn error in the crypto library occurred.\nThe HPKE configuration struct. This holds the …\nHPKE Error types.\nAn HPKE key pair has an HPKE private and public key.\nAn HPKE private key is a byte vector.\nAn HPKE public key is a byte vector.\nInconsistent PSK input.\nPSK input is too short (needs to be at least 32 bytes).\nUnable to collect enough randomness.\nInvalid configuration or arguments.\nInvalid input.\nThe message limit for this AEAD, key, and nonce.\nPSK input is required but missing.\nHPKE supports four modes.\nError opening an HPKE ciphertext.\nHPKE with PSK.\nUnknown HPKE mode.\nPSK input is provided but not needed.\nGet the raw key as byte slice.\nGet the raw key as byte slice.\n7.1.2. DeriveKeyPair Derive a key pair for the used KEM …\n5.3. Secret Export\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a key pair from two keys\nCryptographic Dependencies Randomized algorithm to …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSplit the key pair into the two keys\nCreating the Encryption Context Generate the HPKE context …\nCreate a new HPKE public key. Consumes the public key …\nCreate a new HPKE private key. Consumes the private key …\nCreate a new HPKE key pair. Consumes the private and …\nSet up the configuration for HPKE.\n5.2. Encryption and Decryption\nSingle-Shot APIs 6.1. Encryption and DecryptionSingle shot …\nPrelude for HPKE. Include this to get access to all the …\nGet a reference to the HPKE private key of this key pair.\nGet a reference to the HPKE public key of this key pair.\nSingle-Shot APIs 6.2. Secret ExportSingle shot API to …\n5.2. Encryption and Decryption\nSingle-Shot APIs 6.1. Encryption and DecryptionSingle shot …\nSet PRNG state for testing.\nSingle-Shot APIs 6.2. Secret ExportSingle shot API to …\nSet up an HPKE receiver.\nSet up an HPKE sender.\nTest util module. Should be moved really.\nThe type returned in the event of a conversion error.\nSimple and safe type conversions that may fail in a …\nPerforms the conversion.\nConvert <code>bytes</code> to a hex string.\nConvert a hex string to a byte vector.\nConvert a hex string to a byte vector. If the input is <code>None</code>…\nConvert a byte slice into byte slice option. Returns <code>Nonce</code> …")