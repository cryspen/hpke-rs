var searchIndex = JSON.parse('{\
"hpke_rs":{"doc":"This implements the work-in-progress Hybrid Public Key …","t":[0,4,13,13,13,13,13,4,13,13,13,13,4,13,4,13,13,13,4,13,13,4,13,13,13,13,13,8,16,10,0,5,5,5,5,4,13,13,13,13,13,13,13,13,13,13,6,3,6,3,6,3,4,13,13,13,13,3,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["prelude","HpkeAeadError","OpenError","InvalidConfig","InvalidNonce","InvalidCiphertext","UnknownMode","HpkeAeadMode","AesGcm128","AesGcm256","ChaCha20Poly1305","Export","HpkeKdfError","UnknownMode","HpkeKdfMode","HkdfSha256","HkdfSha384","HkdfSha512","HpkeKemError","UnknownMode","CryptoError","HpkeKemMode","DhKemP256","DhKemP384","DhKemP521","DhKem25519","DhKem448","TryFrom","Error","try_from","test_util","bytes_to_hex","hex_to_bytes","hex_to_bytes_option","vec_to_option_slice","HpkeError","OpenError","InvalidConfig","InvalidInput","UnknownMode","InconsistentPsk","MissingPsk","UnnecessaryPsk","InsecurePsk","CryptoError","MessageLimitReached","HPKEPublicKey","HpkePublicKey","HPKEPrivateKey","HpkePrivateKey","HPKEKeyPair","HpkeKeyPair","Mode","Base","Psk","Auth","AuthPsk","Context","seal","open","export","Hpke","new","setup_sender","setup_receiver","seal","open","send_export","receiver_export","key_schedule","generate_key_pair","derive_key_pair","set_kem_random","new","private_key","public_key","into_keys","from_keys","new","as_slice","new","as_slice","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_owned","clone_into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","into","to_string","borrow","borrow_mut","try_from","try_into","type_id","vzip","from","from","from","from","from","from","from","from","from","clone","clone","clone","clone","clone","clone","clone","clone","default","default","default","eq","eq","eq","eq","eq","ne","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","try_from","try_from","try_from","try_from","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","serialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize"],"q":["hpke_rs","hpke_rs::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs","hpke_rs::test_util","","","","hpke_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs::prelude","hpke_rs","","","","","","","","hpke_rs::prelude","","","hpke_rs","","","","","","","","hpke_rs::prelude","","","hpke_rs","","","","","hpke_rs::prelude","","","","","","hpke_rs","","","","","","","hpke_rs::prelude","","","hpke_rs","","hpke_rs::prelude","","","hpke_rs","hpke_rs::prelude","","","","hpke_rs","","","","","hpke_rs::prelude","","","","hpke_rs","","","",""],"d":["Prelude for HPKE. Include this to get access to all the …","AEAD Errors","Error opening a ciphertext","Invalid configuration","Invalid Nonce","Invalid Ciphertext","Unknown AEAD mode","AEAD modes.","AES GCM 128","AES GCM 256","ChaCha20 Poly1305","Export-only","KDF Errors","The KDF mode is unknown.","KDF Modes","HKDF SHA 256","HKDF SHA 384","HKDF SHA 512","KEM Errors","The KEM mode is unknown.","A cryptographic operation failed.","KEM Modes","DH KEM on P256","DH KEM on P384","DH KEM on P521","DH KEM on x25519","DH KEM on x448","Simple and safe type conversions that may fail in a …","The type returned in the event of a conversion error.","Performs the conversion.","Test util module. Should be moved really.","Convert <code>bytes</code> to a hex string.","Convert a hex string to a byte vector.","Convert a hex string to a byte vector. If the input is …","Convert a byte slice into byte slice option. Returns <code>Nonce</code>…","HPKE Error types.","Error opening an HPKE ciphertext.","Invalid configuration or arguments.","Invalid input.","Unknown HPKE mode.","Inconsistent PSK input.","PSK input is required but missing.","PSK input is provided but not needed.","PSK input is too short (needs to be at least 32 bytes).","An error in the crypto library occurred.","The message limit for this AEAD, key, and nonce.","","An HPKE public key is a byte vector.","","An HPKE private key is a byte vector.","","An HPKE key pair has an HPKE private and public key.","HPKE supports four modes.","HPKE Base mode.","HPKE with PSK.","Authenticated HPKE.","Authenticated HPKE with PSK.","The HPKE context. Note that the RFC currently doesn’t …","5.2. Encryption and Decryption","5.2. Encryption and Decryption","5.3. Secret Export","The HPKE configuration struct. This holds the …","Set up the configuration for HPKE.","Set up an HPKE sender.","Set up an HPKE receiver.","Single-Shot APIs 6.1. Encryption and DecryptionSingle …","Single-Shot APIs 6.1. Encryption and DecryptionSingle …","Single-Shot APIs 6.2. Secret ExportSingle shot API to …","Single-Shot APIs 6.2. Secret ExportSingle shot API to …","5.1. Creating the Encryption Context Generate the HPKE …","Cryptographic Dependencies Randomized algorithm to …","7.1.2. DeriveKeyPair Derive a key pair for the used KEM …","Set randomness for testing HPKE (KEM) without randomness.","Create a new HPKE key pair. Consumes the private and …","Get a reference to the HPKE private key of this key pair.","Get a reference to the HPKE public key of this key pair.","Split the key pair into the two keys","Build a key pair from two keys","Create a new HPKE private key. Consumes the private key …","Get the raw key as byte slice.","Create a new HPKE public key. Consumes the public key …","Get the raw key as byte slicei":[0,0,1,1,1,1,1,0,2,2,2,2,0,3,0,4,4,4,0,5,5,0,6,6,6,6,6,0,7,7,0,0,0,0,0,0,8,8,8,8,8,8,8,8,8,8,0,0,0,0,0,0,0,9,9,9,9,0,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,13,13,14,14,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,5,5,5,5,5,5,5,5,8,8,8,8,8,8,8,8,8,8,14,14,14,14,14,14,14,14,14,14,13,13,13,13,13,13,13,13,13,13,12,12,12,12,12,12,12,12,12,12,9,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,5,12,12,13,13,14,14,8,8,2,4,6,8,14,13,12,9,14,13,12,2,4,6,8,14,14,9,13,2,1,4,3,6,5,8,14,12,9,10,11,13,2,4,6,9,11,2,4,6,9,2,1,4,6,14,13,12,9,11,2,1,4,6,14,13,12,9,11],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["result",4]],null,[[],["string",3]],[[["str",15]],[["vec",3],["u8",15]]],[[["option",4],["string",3]],[["vec",3],["u8",15]]],[[],["option",4]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],[["vec",3],["result",4],["hpkeerror",4]]],[[],[["vec",3],["result",4],["hpkeerror",4]]],[[["usize",15]],[["vec",3],["u8",15]]],null,[[["mode",4],["mode",4],["mode",4],["mode",4]]],[[["option",4],["option",4],["hpkepublickey",3],["hpkeprivatekey",3]],[["result",4],["hpkeerror",4]]],[[["option",4],["hpkepublickey",3],["hpkeprivatekey",3],["option",4]],[["context",3],["result",4],["hpkeerror",4]]],[[["option",4],["option",4],["hpkepublickey",3],["hpkeprivatekey",3]],[["result",4],["hpkeerror",4]]],[[["option",4],["hpkepublickey",3],["hpkeprivatekey",3],["option",4]],[["vec",3],["result",4],["hpkeerror",4]]],[[["option",4],["option",4],["hpkepublickey",3],["hpkeprivatekey",3],["usize",15]],[["result",4],["hpkeerror",4]]],[[["option",4],["usize",15],["hpkepublickey",3],["hpkeprivatekey",3],["option",4]],[["vec",3],["result",4],["hpkeerror",4]]],[[],[["context",3],["result",4],["hpkeerror",4]]],[[],["hpkekeypair",3]],[[],["hpkekeypair",3]],[[]],[[["vec",3],["u8",15]]],[[],["hpkeprivatekey",3]],[[],["hpkepublickey",3]],[[]],[[["hpkeprivatekey",3],["hpkepublickey",3]]],[[["vec",3],["u8",15]]],[[]],[[["vec",3],["u8",15]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[]],[[]],[[],["string",3]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],[[["ecdherror",4]]],[[]],[[]],[[["vec",3],["u8",15]]],[[]],[[["vec",3],["u8",15]]],[[]],[[["error",4]]],[[["error",4]]],[[],["mode",4]],[[],["mode",4]],[[],["mode",4]],[[],["hpkeerror",4]],[[],["hpkepublickey",3]],[[],["hpkeprivatekey",3]],[[],["hpkekeypair",3]],[[],["mode",4]],[[],["hpkepublickey",3]],[[],["hpkeprivatekey",3]],[[],["hpkekeypair",3]],[[["mode",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["hpkeerror",4]],["bool",15]],[[["hpkepublickey",3]],["bool",15]],[[["hpkepublickey",3]],["bool",15]],[[["mode",4]],["bool",15]],[[],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u16",15]],[["error",4],["result",4],["mode",4]]],[[["u16",15]],[["error",4],["mode",4],["result",4]]],[[["u16",15]],[["result",4],["mode",4],["error",4]]],[[["u16",15]],[["result",4],["hpkeerror",4],["mode",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]]],"p":[[4,"HpkeAeadError"],[4,"HpkeAeadMode"],[4,"HpkeKdfError"],[4,"HpkeKdfMode"],[4,"HpkeKemError"],[4,"HpkeKemMode"],[8,"TryFrom"],[4,"HpkeError"],[4,"Mode"],[3,"Context"],[3,"Hpke"],[3,"HpkeKeyPair"],[3,"HpkePrivateKey"],[3,"HpkePublicKey"]]}\
}');
initSearch(searchIndex);