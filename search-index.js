var searchIndex = JSON.parse('{\
"hpke_rs":{"doc":"This implements the work-in-progress Hybrid Public Key …","t":[13,13,13,3,13,6,6,6,3,4,3,3,3,13,13,13,13,13,13,4,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,16,13,13,13,13,4,4,4,4,4,4,13,13,13,13,13,8,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,5,5],"n":["Auth","AuthPsk","Base","Context","CryptoError","HPKEKeyPair","HPKEPrivateKey","HPKEPublicKey","Hpke","HpkeError","HpkeKeyPair","HpkePrivateKey","HpkePublicKey","InconsistentPsk","InsecurePsk","InvalidConfig","InvalidInput","MessageLimitReached","MissingPsk","Mode","OpenError","Psk","UnknownMode","UnnecessaryPsk","as_slice","as_slice","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","derive_key_pair","deserialize","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","eq","export","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_keys","generate_key_pair","into","into","into","into","into","into","into","into_keys","key_schedule","ne","new","new","new","new","open","open","prelude","private_key","public_key","receiver_export","seal","seal","send_export","serialize","serialize","serialize","serialize","serialize","set_kem_random","setup_receiver","setup_sender","test_util","tls_deserialize","tls_serialize","tls_serialized_len","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AesGcm128","AesGcm256","ChaCha20Poly1305","CryptoError","CryptoLibError","DhKem25519","DhKem448","DhKemP256","DhKemP384","DhKemP521","Error","Export","HkdfSha256","HkdfSha384","HkdfSha512","HpkeAeadError","HpkeAeadMode","HpkeKdfError","HpkeKdfMode","HpkeKemError","HpkeKemMode","InvalidCiphertext","InvalidConfig","InvalidNonce","KeyGenerationError","OpenError","TryFrom","UnknownMode","UnknownMode","UnknownMode","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","deserialize","deserialize","deserialize","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","serialize","serialize","serialize","serialize","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","bytes_to_hex","hex_to_bytes","hex_to_bytes_option","vec_to_option_slice"],"q":["hpke_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs::prelude","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hpke_rs::test_util","","",""],"d":["Authenticated HPKE.","Authenticated HPKE with PSK.","HPKE Base mode.","The HPKE context. Note that the RFC currently doesn’t …","An error in the crypto library occurred.","","","","The HPKE configuration struct. This holds the …","HPKE Error types.","An HPKE key pair has an HPKE private and public key.","An HPKE private key is a byte vector.","An HPKE public key is a byte vector.","Inconsistent PSK input.","PSK input is too short (needs to be at least 32 bytes).","Invalid configuration or arguments.","Invalid input.","The message limit for this AEAD, key, and nonce.","PSK input is required but missing.","HPKE supports four modes.","Error opening an HPKE ciphertext.","HPKE with PSK.","Unknown HPKE mode.","PSK input is provided but not needed.","Get the raw key as byte slice.","Get the raw key as byte slice.","","","","","","","","","","","","","","","","","","","","","","","","","","","","7.1.2. DeriveKeyPair Derive a key pair for the used KEM …","","","","","","","","","","5.3. Secret Export","","","","","","","","","","","","","","","","","","","","","","","","","Build a key pair from two keys","Cryptographic Dependencies Randomized algorithm to …","","","","","","","","Split the key pair into the two keys","5.1. Creating the Encryption Context Generate the HPKE …","","Create a new HPKE public key. Consumes the public key …","Create a new HPKE private key. Consumes the private key …","Create a new HPKE key pair. Consumes the private and …","Set up the configuration for HPKE.","5.2. Encryption and Decryption","Single-Shot APIs 6.1. Encryption and DecryptionSingle …","Prelude for HPKE. Include this to get access to all the …","Get a reference to the HPKE private key of this key pair.","Get a reference to the HPKE public key of this key pair.","Single-Shot APIs 6.2. Secret ExportSingle shot API to …","5.2. Encryption and Decryption","Single-Shot APIs 6.1. Encryption and DecryptionSingle …","Single-Shot APIs 6.2. Secret ExportSingle shot API to …","","","","","","Set randomness for testing HPKE (KEM) without randomness.","Set up an HPKE receiver.","Set up an HPKE sender.","Test util module. Should be moved really.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","AES GCM 128","AES GCM 256","ChaCha20 Poly1305","A cryptographic operation failed.","Error from the crypto library","DH KEM on x25519","DH KEM on x448","DH KEM on P256","DH KEM on P384","DH KEM on P521","The type returned in the event of a conversion error.","Export-only","HKDF SHA 256","HKDF SHA 384","HKDF SHA 512","AEAD Errors","AEAD modes.","KDF Errors","KDF Modes","KEM Errors","KEM Modes","Invalid Ciphertext","Invalid configuration","Invalid Nonce","Key generation error.","Error opening a ciphertext","Simple and safe type conversions that may fail in a …","Unknown AEAD mode","The KDF mode is unknown.","The KEM mode is unknown.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Performs the conversion.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Convert <code>bytes</code> to a hex string.","Convert a hex string to a byte vector.","Convert a hex string to a byte vector. If the input is …","Convert a byte slice into byte slice option. Returns <code>Nonce</code>…"],"i":[1,1,1,0,2,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,2,1,2,2,3,4,5,2,3,4,6,1,7,5,2,3,4,6,1,7,2,3,4,6,1,2,3,4,6,1,3,4,6,7,3,4,6,1,7,2,3,4,1,5,5,2,3,4,6,1,1,7,7,5,2,2,2,3,3,3,4,4,4,6,6,6,1,7,6,7,5,2,3,4,6,1,7,6,7,3,3,4,6,7,5,7,0,6,6,7,5,7,7,3,4,6,1,7,7,7,7,0,3,3,3,2,3,4,6,1,1,7,5,2,3,4,6,1,1,7,5,2,3,4,6,1,7,5,2,3,4,6,1,7,5,2,3,4,6,1,7,8,8,8,9,10,11,11,11,11,11,12,8,13,13,13,0,0,0,0,0,0,10,10,10,9,10,0,10,14,9,8,10,13,14,11,9,8,10,13,14,11,9,8,13,11,8,13,11,8,10,13,11,8,13,11,8,8,10,13,13,14,11,11,9,8,10,10,13,14,11,9,9,8,10,13,14,11,9,8,10,13,11,8,13,11,8,13,11,12,8,8,10,13,13,14,11,11,9,8,10,13,14,11,9,8,10,13,14,11,9,8,10,13,14,11,9,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["hpkeerror",4]],[[],["hpkepublickey",3]],[[],["hpkeprivatekey",3]],[[],["hpkekeypair",3]],[[],["mode",4]],[[]],[[]],[[]],[[]],[[]],[[],["hpkepublickey",3]],[[],["hpkeprivatekey",3]],[[],["hpkekeypair",3]],[[],[["hpkeerror",4],["result",4],["hpkekeypair",3]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["hpkeerror",4]],["bool",15]],[[["hpkepublickey",3]],["bool",15]],[[],["bool",15]],[[["mode",4]],["bool",15]],[[["usize",15]],[["u8",15],["vec",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["result",4],["error",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],[[["error",4]]],[[["u8",15],["vec",3]]],[[]],[[]],[[["u8",15],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hpkeprivatekey",3],["hpkepublickey",3]]],[[],[["hpkeerror",4],["result",4],["hpkekeypair",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["hpkeerror",4],["result",4],["context",3]]],[[["hpkepublickey",3]],["bool",15]],[[["u8",15],["vec",3]]],[[["u8",15],["vec",3]]],[[["u8",15],["vec",3]]],[[["mode",4],["mode",4],["mode",4],["mode",4]]],[[],[["vec",3],["hpkeerror",4],["result",4]]],[[["hpkeprivatekey",3],["option",4],["hpkepublickey",3],["option",4]],[["vec",3],["hpkeerror",4],["result",4]]],null,[[],["hpkeprivatekey",3]],[[],["hpkepublickey",3]],[[["hpkeprivatekey",3],["option",4],["hpkepublickey",3],["option",4],["usize",15]],[["vec",3],["hpkeerror",4],["result",4]]],[[],[["vec",3],["hpkeerror",4],["result",4]]],[[["hpkepublickey",3],["hpkeprivatekey",3],["option",4],["option",4]],[["result",4],["hpkeerror",4]]],[[["hpkepublickey",3],["hpkeprivatekey",3],["option",4],["option",4],["usize",15]],[["result",4],["hpkeerror",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[["hpkeprivatekey",3],["option",4],["hpkepublickey",3],["option",4]],[["hpkeerror",4],["result",4],["context",3]]],[[["hpkepublickey",3],["hpkeprivatekey",3],["option",4],["option",4]],[["hpkeerror",4],["result",4]]],null,[[],[["error",4],["result",4]]],[[],[["error",4],["usize",15],["result",4]]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["u8",15]],[["hpkeerror",4],["result",4],["mode",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["mode",4]],[[],["mode",4]],[[],["mode",4]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["mode",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["mode",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["error",4]]],[[]],[[]],[[]],[[]],[[]],[[["ecdherror",4]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[["u16",15]],[["error",4],["mode",4],["result",4]]],[[],["result",4]],[[],["result",4]],[[["u16",15]],[["result",4],["error",4],["mode",4]]],[[],["result",4]],[[],["result",4]],[[["u16",15]],[["result",4],["error",4],["mode",4]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[["str",15]],[["u8",15],["vec",3]]],[[["string",3],["option",4]],[["u8",15],["vec",3]]],[[],["option",4]]],"p":[[4,"Mode"],[4,"HpkeError"],[3,"HpkePublicKey"],[3,"HpkePrivateKey"],[3,"Context"],[3,"HpkeKeyPair"],[3,"Hpke"],[4,"HpkeAeadMode"],[4,"HpkeKemError"],[4,"HpkeAeadError"],[4,"HpkeKemMode"],[8,"TryFrom"],[4,"HpkeKdfMode"],[4,"HpkeKdfError"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};